from telebot import types
import telebot
token = '7995506038:AAH8CD4ZxL3fn7-rPmDNc-gwu5BwuQdSXD4'
bot = telebot.TeleBot(token, parse_mode = 'html')

@bot.message_handler(commands = ['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é ·Øì‚òÖ")
    btn2 = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚ãÜÀöüêæÀñ¬∞")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚ÅÄ‚û¥", reply_markup=markup)

@bot.message_handler(content_types=["text"])
def answer_btn(message):
    if message.text == "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é ·Øì‚òÖ":
        button1 = types.InlineKeyboardButton("êôö–≤–∏–∫—Ç–æ—Ä–∏–Ω—ã", callback_data='–≤–∏–∫—Ç–æ—Ä–∏–Ω—ã')
        button2 = types.InlineKeyboardButton("êôö—Ç–µ—Å—Ç—ã", callback_data = '—Ç–µ—Å—Ç—ã')
        keyboard = [[button1, button2]]
        markup = types.InlineKeyboardMarkup(row_width=3)
        markup.add(button1)
        markup.add(button2)
        bot.send_message(message.chat.id, text = f'    <b>–ü—Ä–∏–≤–µ—Ç! –° –≤–∞–º–∏ –ú–∞—à–∞, –ü–æ–ª–∏–Ω–∞ –∏ –°–∞—à–∞üåü</b>\t \n\n ‚Ä¢–ú—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ—Ç –±–æ—Ç, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å, —Å–¥–µ–ª–∞—Ç—å –≤–µ—Å–µ–ª–µ–µ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ –ø—Ä–æ—Ü–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µüíª \n‚Ä¢–° –Ω–∞—à–∏–º –±–æ—Ç–æ–º –≤—ã –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç–µ –∏—Ö –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ, –Ω–æ –∏ —É–∑–Ω–∞–µ—Ç–µ –±–æ–ª—å—à–µ –Ω–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! \n\n\n <b>–Ω–µ–±–æ–ª—å—à–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b> \n\n <tg-spoiler>‚ô°‚ô° <b>–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –±–æ—Ç?</b></tg-spoiler> \n\n - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ —è–∑—ã–∫–µ Python —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—Å–ø–æ–º–Ω–∏—Ç—å —Ç–µ–æ—Ä–∏—é(–ø–æ—Å–ª–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ–æ—Ä–∏–µ–π, —á—Ç–æ–±—ã –≤—Å–ø–æ–º–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª). \n - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ —Ä–∞–∑–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: ¬´–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –º–∏—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è¬ª –∏ ¬´–ù–µ–æ–±—ã—á–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è¬ª\n\n <tg-spoiler>‚ô°‚ô° <b>–ï—Å—Ç—å –∏–¥–µ—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏–ª–∏ –∏–¥–µ–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω?</b></tg-spoiler> \n\n - –í—ã–±–∏—Ä–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´<u>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</u>¬ª –∏ –ø–∏—à–∏—Ç–µ –Ω–∞–º, –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –Ω–æ–≤—ã–º –∏–¥–µ—è–º!üåü \n\n <b>->–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏  –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π, –≤—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ</b> ‚ÅÄ‚û¥', parse_mode = "html", reply_markup=markup)
    elif message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚ãÜÀöüêæÀñ¬∞":
        button = types.InlineKeyboardButton("–Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')
        keyboard_contacts = [[button]]
        markup_contacts = types.InlineKeyboardMarkup(keyboard_contacts)
        bot.send_message(message.chat.id, text = f'<b>–ï—Å—Ç—å –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞?üí°</b>\t \n\n - - - > –ü–∏—à–∏ –Ω–∞–º, –º—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –Ω–æ–≤—ã–º –∏–¥–µ—è–º!', parse_mode = "html", reply_markup=markup_contacts)
    elif message.text=='A': victory_1(message)


@bot.callback_query_handler(func=lambda call: True)
def querty_handler(call):
    if call.data == '–≤–∏–∫—Ç–æ—Ä–∏–Ω—ã':
        button_1 = types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –º–∏—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data = '1')
        button_2 = types.InlineKeyboardButton("–ù–µ–æ–±—ã—á–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data = '2')
       
        keyboard_2 = [[button_1, button_2]]
        markup_2 = types.InlineKeyboardMarkup(row_width=3)
        markup_2.add(button_1)
        markup_2.add(button_2)
        
        bot.send_message(call.message.chat.id, text = f"–≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:", reply_markup=markup_2)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == '—Ç–µ—Å—Ç—ã':
        bttn_1 = types.InlineKeyboardButton("–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏—è –æ—Å–Ω–æ–≤ Python(1)",callback_data='test1')
        bttn_2 = types.InlineKeyboardButton("–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏—è –æ—Å–Ω–æ–≤ Python(2)", callback_data='test2')
    
        keyboard_3 = [[bttn_1, bttn_2]]
        markup_3 = types.InlineKeyboardMarkup(row_width=3)
        markup_3.add(bttn_1)
        markup_3.add(bttn_2)

        bot.send_message(call.message.chat.id, text = f"—Ç–µ—Å—Ç—ã:", reply_markup=markup_3)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == 'contacts':
        bot.send_message(call.message.chat.id, text = f'@Blood_Marryy')
    elif call.data == '1':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        victory_1("start1", call.message.chat.id)
    elif call.data == 'A1' or call.data == 'B1' or call.data == 'C1' or call.data == 'D1':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        victory_1(call.data, call.message.chat.id)
    elif call.data == '2':
        victory_2("start2", call.message.chat.id)
    elif call.data == 'A' or call.data == 'B' or call.data == 'C' or call.data == 'D':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        victory_2(call.data, call.message.chat.id)  
    elif call.data == 'test1':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        test_1("test1", call.message.chat.id) 
    elif call.data == 'AT' or call.data == 'BT' or call.data == 'CT' or call.data == 'DT':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        test_1(call.data, call.message.chat.id)     
    elif call.data == '3':
        test_1("test1", call.message.chat.id)
    elif call.data == 'test2':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        test_2("test2", call.message.chat.id)
    elif call.data == 'AT2' or call.data == 'BT2' or call.data == 'CT2':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        test_2(call.data, call.message.chat.id)
    elif call.data == '4':
        test_2("test2", call.message.chat.id)
        
 
question_test_v1 = ['êôö—Ç–µ—Å—Ç: ¬´–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ –æ—Å–Ω–æ–≤ Python¬ª\n\n –ì–æ—Ç–æ–≤—ã??\n –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n –ß—Ç–æ –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è: ``` def f(n):\n    if n == 0:\n        return 1\n    else:\n        return n * f(n-1)```','–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥ \n\n –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞? ``` a = [1, 2, 3, None, (), []]\n print(len(a)) ```', '–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥ \n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞üí≠ –ö–∞–∫–æ–π –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö Python –ø–æ–¥—Ö–æ–¥–∏—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ?', '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n\n –ß—Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã?üíª ``` a = 5\n b = a+5\n a = b*100\n print(a)```', '–ü—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n\n –ö–∞–∫–∏–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ?üìé', '–®–µ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n\n –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥?üíª ``` def a(b, c, d):\n     pass```', '–°–µ–¥—å–º–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n\n –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥?üßê ``` d = lambda p: p * 2\n t = lambda p: p * 3\n x = 2\n x = d(x)\n x = t(x)\n x = d(x)\n print(x)```', '–í–æ—Å—å–º–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n\n –ß—Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã?üíª ``` a = [1, 2, 3]\n b = a[::-1]\n c = [x + y for x, y in zip(a, b)]\n print(c[len(c) // 2 - 1])```']
multi_test_1 = ['A: –§–∞–∫—Ç–æ—Ä–∏–∞–ª','A: SyntaxError', 'A: –∫–æ—Ä—Ç–µ–∂(turple)', 'A: 5', 'A: –ª—é–±—ã–µ', 'A: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ', 'A: 24', 'A: 4'] #–≤—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ–¥ –±—É–∫–≤–æ–π –ê


multi_test_2 = ['B: –ù–û–î', 'B: 4', 'B: —Å–ø–∏—Å–æ–∫(list)', 'B: 1000', 'B: —á–∏—Å–ª–æ–≤—ã–µ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ', 'B: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç', 'B: 12', 'B: 3']

multi_test_3 = ['C: –°—É–º–º—É —Ü–∏—Ñ—Ä', 'C: 6', 'C: –º–Ω–æ–∂–µ—Å—Ç–≤–æ(set)', 'C: 25', 'C: —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∏ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ', 'C: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Å—Ç–æ–π –∫–ª–∞—Å—Å', 'C: 36', 'C: –æ—à–∏–±–∫–∞']

correctAnswer_test1 = ['AT', 'CT', 'CT', 'BT', 'CT', 'BT', 'AT', 'AT']

no_correct_answer = ['<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n –§–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n ‚Äî —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –¥–æ n. –û–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —Å–∏–º–≤–æ–ª–æ–º –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: ¬´!¬ª. –ß—Ç–æ–±—ã –≤—ã—á–∏—Å–ª–∏—Ç—å –∏—Ö, –Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–Ω–æ–∂–∏—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –¥–æ —á–∏—Å–ª–∞, —Å—Ç–æ—è—â–µ–≥–æ –ø–æ–¥ –∑–Ω–∞–∫–æ–º —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞.', '–£ —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –ø–æ–¥—É–º–∞–π —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ‚ò∫Ô∏è', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n –ö–ª–∞—Å—Å set (–º–Ω–æ–∂–µ—Å—Ç–≤–æ) ‚Äî —ç—Ç–æ –æ–¥–Ω–∞ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –≤ Python. –û–Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.–¢. –µ., —ç—Ç–æ –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n 1)b = a + 5, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ = 10\n 2)–¥–∞–ª–µ–µ a = b(10)*100, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–∏ –±—É–¥–µ—Ç 1000\n –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, print(a) –≤—ã–≤–µ–¥–µ—Ç 1000', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ Python –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ—Ä—Ç–µ–∂–∏. –°–ª–æ–≤–∞—Ä–∏, —Å–ø–∏—Å–∫–∏ –∏ –¥—Ä—É–≥–∏–µ mutable-–æ–±—ä–µ–∫—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é –º–Ω–æ–∂–µ—Å—Ç–≤–∞.', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n <b>def</b> –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∞ <b>pass</b> –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç. <b>pass</b> –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –∫–æ–≥–¥–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–∫–æ–µ-–ª–∏–±–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è.', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 3, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2.\n<b>–õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—è</b>(—Ç–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–∫ "–∞–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è") - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ def. –û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n–ß–∞—Å—Ç–æ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ Python –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞, –≥–¥–µ –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Å–µ—Ö –∫–æ—Ä—Ç–µ–∂–µ–π, –∞ –≤—Ç–æ—Ä–æ–π ‚Äî –≤—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.\n–í Python –µ—Å—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è zip(), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É.–§—É–Ω–∫—Ü–∏—è zip() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—â–µ–Ω–∏—è –¥–≤—É—Ö –∏ –±–æ–ª–µ–µ —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–∏–Ω. –û–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∫–æ—Ä—Ç–µ–∂–µ–π, –≥–¥–µ i-—ã–π –∫–æ—Ä—Ç–µ–∂ —Å–æ–¥–µ—Ä–∂–∏—Ç i-—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.']


question_test_v2 = ['êôö—Ç–µ—Å—Ç: ¬´–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ –æ—Å–Ω–æ–≤ Python¬ª\n\n –ì–æ—Ç–æ–≤—ã??\n –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n –ß—Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —É—Å–ª–æ–≤–∏—è: ``` a, b = 5, 10\n if a>b:\n     print("a>b")\n else:\n     print("a<=b")```', '–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥ \n\n–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞üëæ: ``` b = [1] + [2]\n print(b)```', '–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥ \n\n–ö–∞–∫–æ–µ –∏–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º?üíª', '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n\n–ß—Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —É—Å–ª–æ–≤–∏—è?üßê ``` for i in (3):\n     print(i, end ='')```', '–ü—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n\n–ß—Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —É—Å–ª–æ–≤–∏—è? ``` for i in range(3):\n     print(-i, end='')```', '–®–µ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n\n–° –ø–æ–º–æ—â—å—é –∫–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –≤ –∏—Ç–µ—Ä–∞—Ç–æ—Ä?üíª', '–°–µ–¥—å–º–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n\n –ö–∞–∫–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ Python —è–≤–ª—è–µ—Ç—Å—è *–∏–∑–º–µ–Ω—è–µ–º—ã–º* (mutable)?', '–í–æ—Å—å–º–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥\n\n –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞?üßê ``` my_dict = {"a": 1, "b": 2, "c": 3}\n print(my_dict.get("d", 0))```', '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç']
multitest2_1 = ['A: a<=b', 'A: [3]', 'A: –†–∞–∑–º–µ—Ä—ã —Å–ø–∏—Å–∫–∞ —á–µ—Ç–∫–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã', 'A: 3', 'A: -1 -2 -3', 'A: iter', 'A: tuple', 'A: KeyError']

multitest2_2 = ['B: a>b', 'B: [1,2]', 'B: –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞', 'B: (3)', 'B: 0 -1 -2 -3', 'B: next', 'B: str', 'B: None']

multitest2_3 = ['C: a<b', 'C: [12]', 'C: –≠—Ç–∏ –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã:\n [a, b, c]\n [c, b, a]', 'C: –æ—à–∏–±–∫–∞', 'C: 0 -1 -2', 'C: –Ω–∏–∫–∞–∫', 'C: list', 'C: 0']

correctAnswer_test2 = ['AT2', 'BT2', 'AT2', 'CT2', 'CT2', 'AT2', 'CT2', 'CT2']

no_correct_answer2 = ['<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n–ü–æ—Å–∫–æ–ª—å–∫—É —É—Å–ª–æ–≤–∏–µ –±–ª–æ–∫–∞ if –æ–∫–∞–∑–∞–ª–æ—Å—å –ª–æ–∂–Ω—ã–º, —Å—Ä–∞–±–æ—Ç–∞–ª –±–ª–æ–∫ else.', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n–í –¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–≥—Ä–∞–º–º—ã –º—ã –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –¥–≤–∞ —Å–ø–∏—Å–∫–∞(—Ç–æ, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫).\n–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ –≤ Python - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–≤—É—Ö –∏–ª–∏ –±–æ–ª–µ–µ —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–∏–Ω.', '–£ —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –ø–æ–¥—É–º–∞–π —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ‚ò∫Ô∏è', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n (3) - —ç—Ç–æ –Ω–µ –∫–æ—Ä—Ç–µ–∂ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º, –∞ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –≤ —Å–∫–æ–±–∫–∞—Ö, —Ç.–µ. –Ω–µ–∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç.', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n–§—É–Ω–∫—Ü–∏—è range() –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏–∑ —Ç—Ä–µ—Ö —á–∏—Å–µ–ª –æ—Ç –Ω—É–ª—è –¥–æ –¥–≤—É—Ö. –ê —Ü–∏–∫–ª for –≤—ã–≤–µ–¥–µ—Ç –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º –∑–Ω–∞–∫–æ–º.', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n–ù–∞–ø—Ä–∏–º–µ—Ä, li_iter = iter([1, 2, 31). –ß—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ next, —Ç–æ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞.', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n list(—Å–ø–∏—Å–æ–∫) ‚Äî –∏–∑–º–µ–Ω—è–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã (–¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è). tuple(–∫–æ—Ä—Ç–µ–∂) –∏ str(—Å—Ç—Ä–æ–∫–∞) ‚Äî –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö. –õ—é–±–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –∞ –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º.', '<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ‚ÅÄ‚û¥\n–ú–µ—Ç–æ–¥ .get() —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É. –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º. –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –∫–ª—é—á "d" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ my_dict, –ø–æ—ç—Ç–æ–º—É –º–µ—Ç–æ–¥ .get("d", 0) –≤–µ—Ä–Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0. –í–∞—Ä–∏–∞–Ω—Ç A (KeyError) –±—ã–ª –±—ã –≤–µ—Ä–µ–Ω, –µ—Å–ª–∏ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –æ–±—ã—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –∫–ª—é—á—É (my_dict["d"]), –∞ –Ω–µ –º–µ—Ç–æ–¥ .get(). –í–∞—Ä–∏–∞–Ω—Ç B (None) —è–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è .get(), –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç.']

        
question_v1 = ['êôö–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞: <b>¬´–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –º–∏—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è¬ª</b>\n\n –ì–æ—Ç–æ–≤—ã??\n <b>–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b>\n –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª—Å—è –ø–µ—Ä–≤—ã–π, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö, –≤–∏—Ä—É—Å? ‡≠®‚ô°‡≠ß', '<b>–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b> \n\n –í —á–µ—Å—Ç—å —á–µ–≥–æ –±—ã–ª –Ω–∞–∑–≤–∞–Ω —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python? üêç', '<b>–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b>\n\n –ö–∞–∫ –∑–≤–∞–ª–∏ –ø–µ—Ä–≤—É—é –≤ –º–∏—Ä–µ –∂–µ–Ω—â–∏–Ω—É-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞? ‡≠®‚ô°‡≠ß', '<b>–ß–µ—Ç–≤—ë—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b>\n\n –ö–∞–∫ –Ω–∞–∑—ã–≤–∞—é—Ç —à—É—Ç–æ—á–Ω—ã–π —Å–µ–∫—Ä–µ—Ç, –∑–∞–ª–æ–∂–µ–Ω–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏ –≤ –ü–û? ‡≠®‚ô°‡≠ß', '<b>–ü—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b>\n\n –ö–∞–∫ –¥—É–º–∞–µ—Ç–µ, –ø—Ä–∞–≤–¥–∞ –ª–∏, —á—Ç–æ Python –µ—Å—Ç—å –Ω–∞ –ú–∞—Ä—Å–µ?üëΩ', '<b>–®–µ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b>\n\n –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ–æ–±—ã—á–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≥–ª—è–¥–∏—Ç, –∫–∞–∫ –Ω–∞–±–æ—Ä —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã—Ö –ø–∏–∫—Å–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π?üëæ', '<b>–°–µ–¥—å–º–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b>\n\n –ì–¥–µ –∂–∏–≤–µ—Ç —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤?üíª', '<b>–í–æ—Å—å–º–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b>\n\n –ö–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —Å–∞–º—ã–π –º–æ–ª–æ–¥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –æ—Å–≤–æ–∏–ª  —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?üë¶üèº']

multi1 = ['A: Creeper(1971 –≥–æ–¥)', 'A: –ó–º–µ—è', 'A: –ì—Ä–µ–π—Å –•–æ–ø–ø–µ—Ä', 'A: –æ–ª–∞–¥—É—à–∫–∞', 'A: –ü—Ä–∞–≤–¥–∞', 'A: Malbolge', 'A: –†–æ—Å—Å–∏—è', 'A: 17 –ª–µ—Ç'] #–≤—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ–¥ –±—É–∫–≤–æ–π –ê

multi2 = ['B: Elk Cloner(1981 –≥–æ–¥)', 'B: –í —á–µ—Å—Ç—å —Ñ–∞–º–∏–ª–∏–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è —è–∑—ã–∫–∞', 'B: –ê–¥–∞ –õ–∞–≤–ª–µ–π—Å', 'B: –∫—Ä—ã—Å–∞', 'B: –í—ã–º—ã—Å–µ–ª', 'B: Befunge', 'B: –ö–∏—Ç–∞–π', 'B: 6 –ª–µ—Ç']

multi3 = ['C: Brain(1986 –≥–æ–¥)', 'C: –í —á–µ—Å—Ç—å –∫–æ–º–µ–¥–∏–π–Ω–æ–≥–æ —à–æ—É', '–°: –ú—ç—Ä–∏ –ö–µ–ª–ª–µ—Ä', '–°: –ø–∞—Å—Ö–∞–ª–∫–∞', 'C: –ò–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?', 'C: Piet', 'C: –°–®–ê', 'C: 10 –ª–µ—Ç']

correctAnswer = ['B1', 'C1', 'B1', 'C1', 'A1', 'C1', 'B1', 'B1']

question_v2 = ['êôö–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞: <b>¬´–ù–µ–æ–±—ã—á–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è¬ª</b> \n\n –ì–æ—Ç–æ–≤—ã??\n\n <b>–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b> \n –ß—Ç–æ —Ç–∞–∫–æ–µ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?üëæ\n\n ', '<b>–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b>\n\n–ü—Ä–æ–π–¥–µ–º—Å—è –ø–æ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–º —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n–ö–∞–∫ –≤—ã –¥—É–º–∞–µ—Ç–µ, –∫–∞–∫ —è–∑—ã–∫ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É?üíª', '<b>–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b> \n\n–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ—Å—Ç–æ—è—â–∏—Ö –ª–∏—à—å –∏–∑ 8 –∫–æ–º–∞–Ω–¥?üëÄ', '<b>–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å:‚ÅÄ‚û¥</b> \n\n–ö–∞–∫ –¥—É–º–∞–µ—Ç–µ, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–ª—Å—è —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?üìé','<b>–ü—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å: ‚ÅÄ‚û¥</b>\n\n –ö–∞–∫–æ–π –∏–∑ –Ω–µ–æ–±—ã—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å ¬´—è–∑—ã–∫–æ–º –≤–µ–∂–ª–∏–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤¬ª?ü§î', '<b>–®–µ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å: ‚ÅÄ‚û¥</b>\n\n –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –ø–∏—Å–∞—Ç—å –¥–∂–∞–∑–æ–≤—É—é –º—É–∑—ã–∫—É, –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å?üé∂', '<b>–°–µ–¥—å–º–æ–π –≤–æ–ø—Ä–æ—Å: ‚ÅÄ‚û¥</b>\n\n –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫—É—Ä–æ—á–µ–∫?üêì', '<b>–í–æ—Å—å–º–æ–π –≤–æ–ø—Ä–æ—Å: ‚ÅÄ‚û¥</b>\n\n –ê —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ä–∞–Ω–≥—É—Ç–∞–Ω–≥–æ–≤?ü¶ß']

multi1_v2 = ['A: –¢–∞–∫–∏—Ö –Ω–µ –±—ã–≤–∞–µ—Ç', '–ê: Java', 'A: Brainf*ck', 'A: INTERCAL', 'A: INTERCAL', 'A: Velato', 'A: –ó–≤—É—á–∏—Ç, –∫–∞–∫ –±—Ä–µ–¥', 'A: –°—É—â–µ—Å—Ç–≤—É–µ—Ç']

multi2_v2 = ['B: –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏ –Ω–µ–æ–±—ã—á–Ω—ã–µ —è–∑—ã–∫–∏', 'B: Avrasm', 'B: Befunge', 'B: FALSE', 'B: Ook!', 'B: ArnoldC', 'B: –°—É—â–µ—Å—Ç–≤—É–µ—Ç', 'B: –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç']

multi3_v2 = ['C: –°–µ–∫—Ç–∞–Ω—Ç—Å–∫–∏–µ —è–∑—ã–∫–∏', 'C: Hexagony', 'C: Piet', 'C: Befunge', 'C: LOLCODE', 'C: Malbolge', 'C: –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'C: –ß—Ç–æ –∑–∞ –±—Ä–µ–¥?']

correctAnswer_v2 = ['B', 'C', 'A', 'A', 'A', 'A', 'B', 'A']

valueWon = ['0', '100', '200', '300', '500', '1.000', '1.500', '3.000', '5.000', '7.500', '15.000', '25.000','50.000', '100.000', '250.000', '1.000.000']

x1 = 0

x2 = 0

x3 = 0

x4 = 0
        
def victory_1(message, chat_id = None):
    global x1
    global check
    global score
    btn1 = types.InlineKeyboardButton("A", callback_data='A1')
    btn2 = types.InlineKeyboardButton("B", callback_data='B1')
    btn3 = types.InlineKeyboardButton("C", callback_data='C1')
    keyboard_ans = [[btn1,btn2,btn3]]
    
    markup_ans = types.InlineKeyboardMarkup(row_width=3)
    markup_ans.add(btn1) 
    markup_ans.add(btn2)
    markup_ans.add(btn3)    
    if  message == 'start1':
        ansr = 'start1'
        x1 = 0
        bot.send_message(chat_id, str(question_v1[x1]+'\n' + multi1[x1]+'\n' + multi2[x1]+'\n' + multi3[x1]+'\n'),reply_markup=markup_ans)


    elif(str.upper(message) == 'A1' or str.upper(message) == 'B1' or str.upper(message) == 'C1') and x1<14:
        if str.upper(message) == correctAnswer[x1]:
            bot.send_message(chat_id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚ò∫Ô∏è')
            x1+=1
            bot.send_message(chat_id, '–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç' + str(valueWon[x1]))
            
            if x1 == 8:
                x1=0
                bot.send_message(chat_id, str('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!!üòäüéâ'))
            else:
                bot.send_message(chat_id, str(question_v1[x1] + '\n' + multi1[x1] + '\n' + multi2[x1]+'\n' + multi3[x1]+'\n'),reply_markup=markup_ans)
        else:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æüôÅ–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ‚ÅÄ‚û¥')
            btn = types.InlineKeyboardButton("–ó–∞–Ω–æ–≤–æ", callback_data='1')
            markup_1 = types.InlineKeyboardMarkup(row_width=3)
            markup_1.add(btn)
            bot.send_message(chat_id, '–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å',reply_markup=markup_1)
    else:
        bot.send_message(chat_id, str(question_v1[x1]+'\n'+multi1[x1] + '\n' + multi2[x1] + '\n' + multi3[x1] +'\n'),reply_markup=markup_ans)
        
def victory_2(message, chat_id = None):
    global x2
    global check
    global score
    btn1 = types.InlineKeyboardButton("A", callback_data='A')
    btn2 = types.InlineKeyboardButton("B", callback_data='B')
    btn3 = types.InlineKeyboardButton("C", callback_data='C')
    keyboard_ans = [[btn1,btn2,btn3]]
    
    markup_ans = types.InlineKeyboardMarkup(row_width=3)
    markup_ans.add(btn1) 
    markup_ans.add(btn2)
    markup_ans.add(btn3)    
    if  message == 'start2':
        ansr = 'start2'
        x2 = 0
        bot.send_message(chat_id, str(question_v2[x2]+'\n' + multi1_v2[x2]+'\n' + multi2_v2[x2]+'\n' + multi3_v2[x2]+'\n'),reply_markup=markup_ans)


    elif(str.upper(message) == 'A' or str.upper(message) == 'B' or str.upper(message) == 'C') and x2<14:
        if str.upper(message) == correctAnswer_v2[x2]:
            bot.send_message(chat_id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚ò∫Ô∏è')
            x2+=1
            bot.send_message(chat_id, '–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç' + str(valueWon[x2]))
            if x2==8:
                x2=0
                bot.send_message(chat_id, str('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!!üòäüéâ'))
            else:
                bot.send_message(chat_id, str(question_v2[x2] + '\n' + multi1_v2[x2] + '\n' + multi2_v2[x2]+'\n' + multi3_v2[x2]+'\n'),reply_markup=markup_ans)
        else:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æüôÅ–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ‚ÅÄ‚û¥')
            btn = types.InlineKeyboardButton("–ó–∞–Ω–æ–≤–æ", callback_data='2')
            markup_1 = types.InlineKeyboardMarkup(row_width=3)
            markup_1.add(btn)
            bot.send_message(chat_id, '–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å',reply_markup=markup_1)
    else:
        bot.send_message(chat_id, str(question_v2[x2]+'\n'+multi1_v2[x2] + '\n' + multi2_v2[x2] + '\n' + multi3_v2[x2] +'\n'),reply_markup=markup_ans)
        
def test_1(message, chat_id = None):
    global x3
    btn1 = types.InlineKeyboardButton("A", callback_data='AT')
    btn2 = types.InlineKeyboardButton("B", callback_data='BT')
    btn3 = types.InlineKeyboardButton("C", callback_data='CT')
    keyboard_ans = [[btn1,btn2,btn3]]
    
    markup_ans = types.InlineKeyboardMarkup(row_width=3)
    markup_ans.add(btn1) 
    markup_ans.add(btn2)
    markup_ans.add(btn3)
 
    
    if  message == 'test1':
        ansr = 'test1'
        bot.send_message(chat_id, str(question_test_v1[x3]+'\n' + multi_test_1[x3]+'\n' + multi_test_2[x3]+'\n' + multi_test_3[x3]+'\n'),reply_markup=markup_ans,parse_mode='MARKDOWN')


    elif(str.upper(message) == 'AT' or str.upper(message) == 'BT' or str.upper(message) == 'CT') and x3<14:
        if str.upper(message) == correctAnswer_test1[x3]:
            bot.send_message(chat_id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚ò∫Ô∏è')
            x3+=1
            if x3 ==8:
                x3=0
                bot.send_message(chat_id, str('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! ü•≥ –¢—ã –ø—Ä–æ—à–µ–ª —Ç–µ—Å—ÇüèÜ'))
            else:
                bot.send_message(chat_id, str(question_test_v1[x3] + '\n' + multi_test_1[x3] + '\n' + multi_test_2[x3]+'\n' + multi_test_3[x3]+'\n'),reply_markup=markup_ans,parse_mode='MARKDOWN')
        else:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æüòï')
            bot.send_message(chat_id,  no_correct_answer[x3])
            btn = types.InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data='3')
            markup_1 = types.InlineKeyboardMarkup(row_width=3)
            markup_1.add(btn)
            bot.send_message(chat_id, '–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑',reply_markup=markup_1)
    else:
        bot.send_message(chat_id, str(question_test_v1[x3] + '\n' + multi_test_1[x3] + '\n' + multi_test_2[x3]+'\n' + multi_test_3[x3]+'\n'),reply_markup=markup_ans,parse_mode='MARKDOWN')


def test_2(message, chat_id=None):
    global x4
    btn1 = types.InlineKeyboardButton("A", callback_data='AT2')
    btn2 = types.InlineKeyboardButton("B", callback_data='BT2')
    btn3 = types.InlineKeyboardButton("C", callback_data='CT2')
    keyboard_ans = [[btn1, btn2, btn3]]

    markup_ans = types.InlineKeyboardMarkup(row_width=3)
    markup_ans.add(btn1)
    markup_ans.add(btn2)
    markup_ans.add(btn3)

    if message == 'test2':
        ansr = 'test2'
        bot.send_message(chat_id, str(
            question_test_v2[x4] + '\n' + multitest2_1[x4] + '\n' + multitest2_2[x4] + '\n' + multitest2_3[x4] + '\n'),
                         reply_markup=markup_ans, parse_mode='MARKDOWN')


    elif (str.upper(message) == 'AT2' or str.upper(message) == 'BT2' or str.upper(message) == 'CT2') and x4 < 14:
        if str.upper(message) == correctAnswer_test2[x4]:
            bot.send_message(chat_id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚ò∫Ô∏è')
            x4 += 1
            if x4 == 8:
                x4=0
                bot.send_message(chat_id, str('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! ü•≥ –¢—ã –ø—Ä–æ—à–µ–ª —Ç–µ—Å—ÇüèÜ'))
            else:
                bot.send_message(chat_id, str(
                question_test_v2[x4] + '\n' + multitest2_1[x4] + '\n' + multitest2_2[x4] + '\n' + multitest2_3[
                    x4] + '\n'), reply_markup=markup_ans, parse_mode='MARKDOWN')
        else:
            bot.send_message(chat_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æüòï')
            bot.send_message(chat_id, no_correct_answer2[x4])
            btn = types.InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data='4')
            markup_1 = types.InlineKeyboardMarkup(row_width=3)
            markup_1.add(btn)
            bot.send_message(chat_id, '–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑', reply_markup=markup_1)
    else:
        bot.send_message(chat_id, str(
            question_test_v2[x4] + '\n' + multitest2_1[x4] + '\n' + multitest2_2[x4] + '\n' + multitest2_3[x4] + '\n'),
                         reply_markup=markup_ans, parse_mode='MARKDOWN')


bot.polling(none_stop=True, interval=0)
